// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"io"
	"net/http"

	"github.com/mattermost/mattermost/server/public/model"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// AddReaction provides a mock function for the type MockClient
func (_mock *MockClient) AddReaction(reaction *model.Reaction) error {
	ret := _mock.Called(reaction)

	if len(ret) == 0 {
		panic("no return value specified for AddReaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.Reaction) error); ok {
		r0 = returnFunc(reaction)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_AddReaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddReaction'
type MockClient_AddReaction_Call struct {
	*mock.Call
}

// AddReaction is a helper method to define mock.On call
//   - reaction
func (_e *MockClient_Expecter) AddReaction(reaction interface{}) *MockClient_AddReaction_Call {
	return &MockClient_AddReaction_Call{Call: _e.mock.On("AddReaction", reaction)}
}

func (_c *MockClient_AddReaction_Call) Run(run func(reaction *model.Reaction)) *MockClient_AddReaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Reaction))
	})
	return _c
}

func (_c *MockClient_AddReaction_Call) Return(err error) *MockClient_AddReaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_AddReaction_Call) RunAndReturn(run func(reaction *model.Reaction) error) *MockClient_AddReaction_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePost provides a mock function for the type MockClient
func (_mock *MockClient) CreatePost(post *model.Post) error {
	ret := _mock.Called(post)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.Post) error); ok {
		r0 = returnFunc(post)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_CreatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePost'
type MockClient_CreatePost_Call struct {
	*mock.Call
}

// CreatePost is a helper method to define mock.On call
//   - post
func (_e *MockClient_Expecter) CreatePost(post interface{}) *MockClient_CreatePost_Call {
	return &MockClient_CreatePost_Call{Call: _e.mock.On("CreatePost", post)}
}

func (_c *MockClient_CreatePost_Call) Run(run func(post *model.Post)) *MockClient_CreatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Post))
	})
	return _c
}

func (_c *MockClient_CreatePost_Call) Return(err error) *MockClient_CreatePost_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_CreatePost_Call) RunAndReturn(run func(post *model.Post) error) *MockClient_CreatePost_Call {
	_c.Call.Return(run)
	return _c
}

// DM provides a mock function for the type MockClient
func (_mock *MockClient) DM(senderID string, receiverID string, post *model.Post) error {
	ret := _mock.Called(senderID, receiverID, post)

	if len(ret) == 0 {
		panic("no return value specified for DM")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, *model.Post) error); ok {
		r0 = returnFunc(senderID, receiverID, post)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_DM_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DM'
type MockClient_DM_Call struct {
	*mock.Call
}

// DM is a helper method to define mock.On call
//   - senderID
//   - receiverID
//   - post
func (_e *MockClient_Expecter) DM(senderID interface{}, receiverID interface{}, post interface{}) *MockClient_DM_Call {
	return &MockClient_DM_Call{Call: _e.mock.On("DM", senderID, receiverID, post)}
}

func (_c *MockClient_DM_Call) Run(run func(senderID string, receiverID string, post *model.Post)) *MockClient_DM_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*model.Post))
	})
	return _c
}

func (_c *MockClient_DM_Call) Return(err error) *MockClient_DM_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_DM_Call) RunAndReturn(run func(senderID string, receiverID string, post *model.Post) error) *MockClient_DM_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannel provides a mock function for the type MockClient
func (_mock *MockClient) GetChannel(channelID string) (*model.Channel, error) {
	ret := _mock.Called(channelID)

	if len(ret) == 0 {
		panic("no return value specified for GetChannel")
	}

	var r0 *model.Channel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*model.Channel, error)); ok {
		return returnFunc(channelID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *model.Channel); ok {
		r0 = returnFunc(channelID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Channel)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(channelID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannel'
type MockClient_GetChannel_Call struct {
	*mock.Call
}

// GetChannel is a helper method to define mock.On call
//   - channelID
func (_e *MockClient_Expecter) GetChannel(channelID interface{}) *MockClient_GetChannel_Call {
	return &MockClient_GetChannel_Call{Call: _e.mock.On("GetChannel", channelID)}
}

func (_c *MockClient_GetChannel_Call) Run(run func(channelID string)) *MockClient_GetChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetChannel_Call) Return(channel *model.Channel, err error) *MockClient_GetChannel_Call {
	_c.Call.Return(channel, err)
	return _c
}

func (_c *MockClient_GetChannel_Call) RunAndReturn(run func(channelID string) (*model.Channel, error)) *MockClient_GetChannel_Call {
	_c.Call.Return(run)
	return _c
}

// GetChannelByName provides a mock function for the type MockClient
func (_mock *MockClient) GetChannelByName(teamID string, name string, includeDeleted bool) (*model.Channel, error) {
	ret := _mock.Called(teamID, name, includeDeleted)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelByName")
	}

	var r0 *model.Channel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, bool) (*model.Channel, error)); ok {
		return returnFunc(teamID, name, includeDeleted)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, bool) *model.Channel); ok {
		r0 = returnFunc(teamID, name, includeDeleted)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Channel)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, bool) error); ok {
		r1 = returnFunc(teamID, name, includeDeleted)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetChannelByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChannelByName'
type MockClient_GetChannelByName_Call struct {
	*mock.Call
}

// GetChannelByName is a helper method to define mock.On call
//   - teamID
//   - name
//   - includeDeleted
func (_e *MockClient_Expecter) GetChannelByName(teamID interface{}, name interface{}, includeDeleted interface{}) *MockClient_GetChannelByName_Call {
	return &MockClient_GetChannelByName_Call{Call: _e.mock.On("GetChannelByName", teamID, name, includeDeleted)}
}

func (_c *MockClient_GetChannelByName_Call) Run(run func(teamID string, name string, includeDeleted bool)) *MockClient_GetChannelByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockClient_GetChannelByName_Call) Return(channel *model.Channel, err error) *MockClient_GetChannelByName_Call {
	_c.Call.Return(channel, err)
	return _c
}

func (_c *MockClient_GetChannelByName_Call) RunAndReturn(run func(teamID string, name string, includeDeleted bool) (*model.Channel, error)) *MockClient_GetChannelByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfig provides a mock function for the type MockClient
func (_mock *MockClient) GetConfig() *model.Config {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 *model.Config
	if returnFunc, ok := ret.Get(0).(func() *model.Config); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Config)
		}
	}
	return r0
}

// MockClient_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type MockClient_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *MockClient_Expecter) GetConfig() *MockClient_GetConfig_Call {
	return &MockClient_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *MockClient_GetConfig_Call) Run(run func()) *MockClient_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_GetConfig_Call) Return(config *model.Config) *MockClient_GetConfig_Call {
	_c.Call.Return(config)
	return _c
}

func (_c *MockClient_GetConfig_Call) RunAndReturn(run func() *model.Config) *MockClient_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetDirectChannel provides a mock function for the type MockClient
func (_mock *MockClient) GetDirectChannel(userID1 string, userID2 string) (*model.Channel, error) {
	ret := _mock.Called(userID1, userID2)

	if len(ret) == 0 {
		panic("no return value specified for GetDirectChannel")
	}

	var r0 *model.Channel
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (*model.Channel, error)); ok {
		return returnFunc(userID1, userID2)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) *model.Channel); ok {
		r0 = returnFunc(userID1, userID2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Channel)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(userID1, userID2)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetDirectChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDirectChannel'
type MockClient_GetDirectChannel_Call struct {
	*mock.Call
}

// GetDirectChannel is a helper method to define mock.On call
//   - userID1
//   - userID2
func (_e *MockClient_Expecter) GetDirectChannel(userID1 interface{}, userID2 interface{}) *MockClient_GetDirectChannel_Call {
	return &MockClient_GetDirectChannel_Call{Call: _e.mock.On("GetDirectChannel", userID1, userID2)}
}

func (_c *MockClient_GetDirectChannel_Call) Run(run func(userID1 string, userID2 string)) *MockClient_GetDirectChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockClient_GetDirectChannel_Call) Return(channel *model.Channel, err error) *MockClient_GetDirectChannel_Call {
	_c.Call.Return(channel, err)
	return _c
}

func (_c *MockClient_GetDirectChannel_Call) RunAndReturn(run func(userID1 string, userID2 string) (*model.Channel, error)) *MockClient_GetDirectChannel_Call {
	_c.Call.Return(run)
	return _c
}

// GetFile provides a mock function for the type MockClient
func (_mock *MockClient) GetFile(fileID string) (io.ReadCloser, error) {
	ret := _mock.Called(fileID)

	if len(ret) == 0 {
		panic("no return value specified for GetFile")
	}

	var r0 io.ReadCloser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (io.ReadCloser, error)); ok {
		return returnFunc(fileID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) io.ReadCloser); ok {
		r0 = returnFunc(fileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(fileID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFile'
type MockClient_GetFile_Call struct {
	*mock.Call
}

// GetFile is a helper method to define mock.On call
//   - fileID
func (_e *MockClient_Expecter) GetFile(fileID interface{}) *MockClient_GetFile_Call {
	return &MockClient_GetFile_Call{Call: _e.mock.On("GetFile", fileID)}
}

func (_c *MockClient_GetFile_Call) Run(run func(fileID string)) *MockClient_GetFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetFile_Call) Return(readCloser io.ReadCloser, err error) *MockClient_GetFile_Call {
	_c.Call.Return(readCloser, err)
	return _c
}

func (_c *MockClient_GetFile_Call) RunAndReturn(run func(fileID string) (io.ReadCloser, error)) *MockClient_GetFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileInfo provides a mock function for the type MockClient
func (_mock *MockClient) GetFileInfo(fileID string) (*model.FileInfo, error) {
	ret := _mock.Called(fileID)

	if len(ret) == 0 {
		panic("no return value specified for GetFileInfo")
	}

	var r0 *model.FileInfo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*model.FileInfo, error)); ok {
		return returnFunc(fileID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *model.FileInfo); ok {
		r0 = returnFunc(fileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FileInfo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(fileID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetFileInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileInfo'
type MockClient_GetFileInfo_Call struct {
	*mock.Call
}

// GetFileInfo is a helper method to define mock.On call
//   - fileID
func (_e *MockClient_Expecter) GetFileInfo(fileID interface{}) *MockClient_GetFileInfo_Call {
	return &MockClient_GetFileInfo_Call{Call: _e.mock.On("GetFileInfo", fileID)}
}

func (_c *MockClient_GetFileInfo_Call) Run(run func(fileID string)) *MockClient_GetFileInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetFileInfo_Call) Return(fileInfo *model.FileInfo, err error) *MockClient_GetFileInfo_Call {
	_c.Call.Return(fileInfo, err)
	return _c
}

func (_c *MockClient_GetFileInfo_Call) RunAndReturn(run func(fileID string) (*model.FileInfo, error)) *MockClient_GetFileInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetPluginStatus provides a mock function for the type MockClient
func (_mock *MockClient) GetPluginStatus(pluginID string) (*model.PluginStatus, error) {
	ret := _mock.Called(pluginID)

	if len(ret) == 0 {
		panic("no return value specified for GetPluginStatus")
	}

	var r0 *model.PluginStatus
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*model.PluginStatus, error)); ok {
		return returnFunc(pluginID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *model.PluginStatus); ok {
		r0 = returnFunc(pluginID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PluginStatus)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(pluginID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetPluginStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPluginStatus'
type MockClient_GetPluginStatus_Call struct {
	*mock.Call
}

// GetPluginStatus is a helper method to define mock.On call
//   - pluginID
func (_e *MockClient_Expecter) GetPluginStatus(pluginID interface{}) *MockClient_GetPluginStatus_Call {
	return &MockClient_GetPluginStatus_Call{Call: _e.mock.On("GetPluginStatus", pluginID)}
}

func (_c *MockClient_GetPluginStatus_Call) Run(run func(pluginID string)) *MockClient_GetPluginStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetPluginStatus_Call) Return(pluginStatus *model.PluginStatus, err error) *MockClient_GetPluginStatus_Call {
	_c.Call.Return(pluginStatus, err)
	return _c
}

func (_c *MockClient_GetPluginStatus_Call) RunAndReturn(run func(pluginID string) (*model.PluginStatus, error)) *MockClient_GetPluginStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetPost provides a mock function for the type MockClient
func (_mock *MockClient) GetPost(postID string) (*model.Post, error) {
	ret := _mock.Called(postID)

	if len(ret) == 0 {
		panic("no return value specified for GetPost")
	}

	var r0 *model.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*model.Post, error)); ok {
		return returnFunc(postID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *model.Post); ok {
		r0 = returnFunc(postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(postID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPost'
type MockClient_GetPost_Call struct {
	*mock.Call
}

// GetPost is a helper method to define mock.On call
//   - postID
func (_e *MockClient_Expecter) GetPost(postID interface{}) *MockClient_GetPost_Call {
	return &MockClient_GetPost_Call{Call: _e.mock.On("GetPost", postID)}
}

func (_c *MockClient_GetPost_Call) Run(run func(postID string)) *MockClient_GetPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetPost_Call) Return(post *model.Post, err error) *MockClient_GetPost_Call {
	_c.Call.Return(post, err)
	return _c
}

func (_c *MockClient_GetPost_Call) RunAndReturn(run func(postID string) (*model.Post, error)) *MockClient_GetPost_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostThread provides a mock function for the type MockClient
func (_mock *MockClient) GetPostThread(postID string) (*model.PostList, error) {
	ret := _mock.Called(postID)

	if len(ret) == 0 {
		panic("no return value specified for GetPostThread")
	}

	var r0 *model.PostList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*model.PostList, error)); ok {
		return returnFunc(postID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *model.PostList); ok {
		r0 = returnFunc(postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PostList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(postID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetPostThread_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostThread'
type MockClient_GetPostThread_Call struct {
	*mock.Call
}

// GetPostThread is a helper method to define mock.On call
//   - postID
func (_e *MockClient_Expecter) GetPostThread(postID interface{}) *MockClient_GetPostThread_Call {
	return &MockClient_GetPostThread_Call{Call: _e.mock.On("GetPostThread", postID)}
}

func (_c *MockClient_GetPostThread_Call) Run(run func(postID string)) *MockClient_GetPostThread_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetPostThread_Call) Return(postList *model.PostList, err error) *MockClient_GetPostThread_Call {
	_c.Call.Return(postList, err)
	return _c
}

func (_c *MockClient_GetPostThread_Call) RunAndReturn(run func(postID string) (*model.PostList, error)) *MockClient_GetPostThread_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostsBefore provides a mock function for the type MockClient
func (_mock *MockClient) GetPostsBefore(channelID string, postID string, page int, perPage int) (*model.PostList, error) {
	ret := _mock.Called(channelID, postID, page, perPage)

	if len(ret) == 0 {
		panic("no return value specified for GetPostsBefore")
	}

	var r0 *model.PostList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, int, int) (*model.PostList, error)); ok {
		return returnFunc(channelID, postID, page, perPage)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, int, int) *model.PostList); ok {
		r0 = returnFunc(channelID, postID, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PostList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, int, int) error); ok {
		r1 = returnFunc(channelID, postID, page, perPage)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetPostsBefore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostsBefore'
type MockClient_GetPostsBefore_Call struct {
	*mock.Call
}

// GetPostsBefore is a helper method to define mock.On call
//   - channelID
//   - postID
//   - page
//   - perPage
func (_e *MockClient_Expecter) GetPostsBefore(channelID interface{}, postID interface{}, page interface{}, perPage interface{}) *MockClient_GetPostsBefore_Call {
	return &MockClient_GetPostsBefore_Call{Call: _e.mock.On("GetPostsBefore", channelID, postID, page, perPage)}
}

func (_c *MockClient_GetPostsBefore_Call) Run(run func(channelID string, postID string, page int, perPage int)) *MockClient_GetPostsBefore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockClient_GetPostsBefore_Call) Return(postList *model.PostList, err error) *MockClient_GetPostsBefore_Call {
	_c.Call.Return(postList, err)
	return _c
}

func (_c *MockClient_GetPostsBefore_Call) RunAndReturn(run func(channelID string, postID string, page int, perPage int) (*model.PostList, error)) *MockClient_GetPostsBefore_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostsSince provides a mock function for the type MockClient
func (_mock *MockClient) GetPostsSince(channelID string, since int64) (*model.PostList, error) {
	ret := _mock.Called(channelID, since)

	if len(ret) == 0 {
		panic("no return value specified for GetPostsSince")
	}

	var r0 *model.PostList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int64) (*model.PostList, error)); ok {
		return returnFunc(channelID, since)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int64) *model.PostList); ok {
		r0 = returnFunc(channelID, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PostList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int64) error); ok {
		r1 = returnFunc(channelID, since)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetPostsSince_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostsSince'
type MockClient_GetPostsSince_Call struct {
	*mock.Call
}

// GetPostsSince is a helper method to define mock.On call
//   - channelID
//   - since
func (_e *MockClient_Expecter) GetPostsSince(channelID interface{}, since interface{}) *MockClient_GetPostsSince_Call {
	return &MockClient_GetPostsSince_Call{Call: _e.mock.On("GetPostsSince", channelID, since)}
}

func (_c *MockClient_GetPostsSince_Call) Run(run func(channelID string, since int64)) *MockClient_GetPostsSince_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *MockClient_GetPostsSince_Call) Return(postList *model.PostList, err error) *MockClient_GetPostsSince_Call {
	_c.Call.Return(postList, err)
	return _c
}

func (_c *MockClient_GetPostsSince_Call) RunAndReturn(run func(channelID string, since int64) (*model.PostList, error)) *MockClient_GetPostsSince_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockClient
func (_mock *MockClient) GetUser(userID string) (*model.User, error) {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*model.User, error)); ok {
		return returnFunc(userID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = returnFunc(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockClient_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - userID
func (_e *MockClient_Expecter) GetUser(userID interface{}) *MockClient_GetUser_Call {
	return &MockClient_GetUser_Call{Call: _e.mock.On("GetUser", userID)}
}

func (_c *MockClient_GetUser_Call) Run(run func(userID string)) *MockClient_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetUser_Call) Return(user *model.User, err error) *MockClient_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockClient_GetUser_Call) RunAndReturn(run func(userID string) (*model.User, error)) *MockClient_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function for the type MockClient
func (_mock *MockClient) GetUserByUsername(username string) (*model.User, error) {
	ret := _mock.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*model.User, error)); ok {
		return returnFunc(username)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = returnFunc(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockClient_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - username
func (_e *MockClient_Expecter) GetUserByUsername(username interface{}) *MockClient_GetUserByUsername_Call {
	return &MockClient_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", username)}
}

func (_c *MockClient_GetUserByUsername_Call) Run(run func(username string)) *MockClient_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetUserByUsername_Call) Return(user *model.User, err error) *MockClient_GetUserByUsername_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockClient_GetUserByUsername_Call) RunAndReturn(run func(username string) (*model.User, error)) *MockClient_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserStatus provides a mock function for the type MockClient
func (_mock *MockClient) GetUserStatus(userID string) (*model.Status, error) {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserStatus")
	}

	var r0 *model.Status
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*model.Status, error)); ok {
		return returnFunc(userID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *model.Status); ok {
		r0 = returnFunc(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Status)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetUserStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserStatus'
type MockClient_GetUserStatus_Call struct {
	*mock.Call
}

// GetUserStatus is a helper method to define mock.On call
//   - userID
func (_e *MockClient_Expecter) GetUserStatus(userID interface{}) *MockClient_GetUserStatus_Call {
	return &MockClient_GetUserStatus_Call{Call: _e.mock.On("GetUserStatus", userID)}
}

func (_c *MockClient_GetUserStatus_Call) Run(run func(userID string)) *MockClient_GetUserStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetUserStatus_Call) Return(status *model.Status, err error) *MockClient_GetUserStatus_Call {
	_c.Call.Return(status, err)
	return _c
}

func (_c *MockClient_GetUserStatus_Call) RunAndReturn(run func(userID string) (*model.Status, error)) *MockClient_GetUserStatus_Call {
	_c.Call.Return(run)
	return _c
}

// HasPermissionTo provides a mock function for the type MockClient
func (_mock *MockClient) HasPermissionTo(userID string, permission *model.Permission) bool {
	ret := _mock.Called(userID, permission)

	if len(ret) == 0 {
		panic("no return value specified for HasPermissionTo")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string, *model.Permission) bool); ok {
		r0 = returnFunc(userID, permission)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockClient_HasPermissionTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasPermissionTo'
type MockClient_HasPermissionTo_Call struct {
	*mock.Call
}

// HasPermissionTo is a helper method to define mock.On call
//   - userID
//   - permission
func (_e *MockClient_Expecter) HasPermissionTo(userID interface{}, permission interface{}) *MockClient_HasPermissionTo_Call {
	return &MockClient_HasPermissionTo_Call{Call: _e.mock.On("HasPermissionTo", userID, permission)}
}

func (_c *MockClient_HasPermissionTo_Call) Run(run func(userID string, permission *model.Permission)) *MockClient_HasPermissionTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*model.Permission))
	})
	return _c
}

func (_c *MockClient_HasPermissionTo_Call) Return(b bool) *MockClient_HasPermissionTo_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockClient_HasPermissionTo_Call) RunAndReturn(run func(userID string, permission *model.Permission) bool) *MockClient_HasPermissionTo_Call {
	_c.Call.Return(run)
	return _c
}

// HasPermissionToChannel provides a mock function for the type MockClient
func (_mock *MockClient) HasPermissionToChannel(userID string, channelID string, permission *model.Permission) bool {
	ret := _mock.Called(userID, channelID, permission)

	if len(ret) == 0 {
		panic("no return value specified for HasPermissionToChannel")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string, string, *model.Permission) bool); ok {
		r0 = returnFunc(userID, channelID, permission)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockClient_HasPermissionToChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasPermissionToChannel'
type MockClient_HasPermissionToChannel_Call struct {
	*mock.Call
}

// HasPermissionToChannel is a helper method to define mock.On call
//   - userID
//   - channelID
//   - permission
func (_e *MockClient_Expecter) HasPermissionToChannel(userID interface{}, channelID interface{}, permission interface{}) *MockClient_HasPermissionToChannel_Call {
	return &MockClient_HasPermissionToChannel_Call{Call: _e.mock.On("HasPermissionToChannel", userID, channelID, permission)}
}

func (_c *MockClient_HasPermissionToChannel_Call) Run(run func(userID string, channelID string, permission *model.Permission)) *MockClient_HasPermissionToChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*model.Permission))
	})
	return _c
}

func (_c *MockClient_HasPermissionToChannel_Call) Return(b bool) *MockClient_HasPermissionToChannel_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockClient_HasPermissionToChannel_Call) RunAndReturn(run func(userID string, channelID string, permission *model.Permission) bool) *MockClient_HasPermissionToChannel_Call {
	_c.Call.Return(run)
	return _c
}

// KVGet provides a mock function for the type MockClient
func (_mock *MockClient) KVGet(key string, value interface{}) error {
	ret := _mock.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for KVGet")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = returnFunc(key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_KVGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KVGet'
type MockClient_KVGet_Call struct {
	*mock.Call
}

// KVGet is a helper method to define mock.On call
//   - key
//   - value
func (_e *MockClient_Expecter) KVGet(key interface{}, value interface{}) *MockClient_KVGet_Call {
	return &MockClient_KVGet_Call{Call: _e.mock.On("KVGet", key, value)}
}

func (_c *MockClient_KVGet_Call) Run(run func(key string, value interface{})) *MockClient_KVGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockClient_KVGet_Call) Return(err error) *MockClient_KVGet_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_KVGet_Call) RunAndReturn(run func(key string, value interface{}) error) *MockClient_KVGet_Call {
	_c.Call.Return(run)
	return _c
}

// KVSet provides a mock function for the type MockClient
func (_mock *MockClient) KVSet(key string, value interface{}) error {
	ret := _mock.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for KVSet")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = returnFunc(key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_KVSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KVSet'
type MockClient_KVSet_Call struct {
	*mock.Call
}

// KVSet is a helper method to define mock.On call
//   - key
//   - value
func (_e *MockClient_Expecter) KVSet(key interface{}, value interface{}) *MockClient_KVSet_Call {
	return &MockClient_KVSet_Call{Call: _e.mock.On("KVSet", key, value)}
}

func (_c *MockClient_KVSet_Call) Run(run func(key string, value interface{})) *MockClient_KVSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockClient_KVSet_Call) Return(err error) *MockClient_KVSet_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_KVSet_Call) RunAndReturn(run func(key string, value interface{}) error) *MockClient_KVSet_Call {
	_c.Call.Return(run)
	return _c
}

// LogDebug provides a mock function for the type MockClient
func (_mock *MockClient) LogDebug(msg string, keyValuePairs ...interface{}) {
	if len(keyValuePairs) > 0 {
		_mock.Called(msg, keyValuePairs)
	} else {
		_mock.Called(msg)
	}

	return
}

// MockClient_LogDebug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogDebug'
type MockClient_LogDebug_Call struct {
	*mock.Call
}

// LogDebug is a helper method to define mock.On call
//   - msg
//   - keyValuePairs
func (_e *MockClient_Expecter) LogDebug(msg interface{}, keyValuePairs ...interface{}) *MockClient_LogDebug_Call {
	return &MockClient_LogDebug_Call{Call: _e.mock.On("LogDebug",
		append([]interface{}{msg}, keyValuePairs...)...)}
}

func (_c *MockClient_LogDebug_Call) Run(run func(msg string, keyValuePairs ...interface{})) *MockClient_LogDebug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]interface{})
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_LogDebug_Call) Return() *MockClient_LogDebug_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClient_LogDebug_Call) RunAndReturn(run func(msg string, keyValuePairs ...interface{})) *MockClient_LogDebug_Call {
	_c.Run(run)
	return _c
}

// LogError provides a mock function for the type MockClient
func (_mock *MockClient) LogError(msg string, keyValuePairs ...interface{}) {
	if len(keyValuePairs) > 0 {
		_mock.Called(msg, keyValuePairs)
	} else {
		_mock.Called(msg)
	}

	return
}

// MockClient_LogError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogError'
type MockClient_LogError_Call struct {
	*mock.Call
}

// LogError is a helper method to define mock.On call
//   - msg
//   - keyValuePairs
func (_e *MockClient_Expecter) LogError(msg interface{}, keyValuePairs ...interface{}) *MockClient_LogError_Call {
	return &MockClient_LogError_Call{Call: _e.mock.On("LogError",
		append([]interface{}{msg}, keyValuePairs...)...)}
}

func (_c *MockClient_LogError_Call) Run(run func(msg string, keyValuePairs ...interface{})) *MockClient_LogError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]interface{})
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_LogError_Call) Return() *MockClient_LogError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClient_LogError_Call) RunAndReturn(run func(msg string, keyValuePairs ...interface{})) *MockClient_LogError_Call {
	_c.Run(run)
	return _c
}

// LogWarn provides a mock function for the type MockClient
func (_mock *MockClient) LogWarn(msg string, keyValuePairs ...interface{}) {
	if len(keyValuePairs) > 0 {
		_mock.Called(msg, keyValuePairs)
	} else {
		_mock.Called(msg)
	}

	return
}

// MockClient_LogWarn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogWarn'
type MockClient_LogWarn_Call struct {
	*mock.Call
}

// LogWarn is a helper method to define mock.On call
//   - msg
//   - keyValuePairs
func (_e *MockClient_Expecter) LogWarn(msg interface{}, keyValuePairs ...interface{}) *MockClient_LogWarn_Call {
	return &MockClient_LogWarn_Call{Call: _e.mock.On("LogWarn",
		append([]interface{}{msg}, keyValuePairs...)...)}
}

func (_c *MockClient_LogWarn_Call) Run(run func(msg string, keyValuePairs ...interface{})) *MockClient_LogWarn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]interface{})
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_LogWarn_Call) Return() *MockClient_LogWarn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClient_LogWarn_Call) RunAndReturn(run func(msg string, keyValuePairs ...interface{})) *MockClient_LogWarn_Call {
	_c.Run(run)
	return _c
}

// PluginHTTP provides a mock function for the type MockClient
func (_mock *MockClient) PluginHTTP(req *http.Request) *http.Response {
	ret := _mock.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for PluginHTTP")
	}

	var r0 *http.Response
	if returnFunc, ok := ret.Get(0).(func(*http.Request) *http.Response); ok {
		r0 = returnFunc(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	return r0
}

// MockClient_PluginHTTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PluginHTTP'
type MockClient_PluginHTTP_Call struct {
	*mock.Call
}

// PluginHTTP is a helper method to define mock.On call
//   - req
func (_e *MockClient_Expecter) PluginHTTP(req interface{}) *MockClient_PluginHTTP_Call {
	return &MockClient_PluginHTTP_Call{Call: _e.mock.On("PluginHTTP", req)}
}

func (_c *MockClient_PluginHTTP_Call) Run(run func(req *http.Request)) *MockClient_PluginHTTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockClient_PluginHTTP_Call) Return(response *http.Response) *MockClient_PluginHTTP_Call {
	_c.Call.Return(response)
	return _c
}

func (_c *MockClient_PluginHTTP_Call) RunAndReturn(run func(req *http.Request) *http.Response) *MockClient_PluginHTTP_Call {
	_c.Call.Return(run)
	return _c
}

// PublishWebSocketEvent provides a mock function for the type MockClient
func (_mock *MockClient) PublishWebSocketEvent(event string, payload map[string]interface{}, broadcast *model.WebsocketBroadcast) {
	_mock.Called(event, payload, broadcast)
	return
}

// MockClient_PublishWebSocketEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishWebSocketEvent'
type MockClient_PublishWebSocketEvent_Call struct {
	*mock.Call
}

// PublishWebSocketEvent is a helper method to define mock.On call
//   - event
//   - payload
//   - broadcast
func (_e *MockClient_Expecter) PublishWebSocketEvent(event interface{}, payload interface{}, broadcast interface{}) *MockClient_PublishWebSocketEvent_Call {
	return &MockClient_PublishWebSocketEvent_Call{Call: _e.mock.On("PublishWebSocketEvent", event, payload, broadcast)}
}

func (_c *MockClient_PublishWebSocketEvent_Call) Run(run func(event string, payload map[string]interface{}, broadcast *model.WebsocketBroadcast)) *MockClient_PublishWebSocketEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}), args[2].(*model.WebsocketBroadcast))
	})
	return _c
}

func (_c *MockClient_PublishWebSocketEvent_Call) Return() *MockClient_PublishWebSocketEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClient_PublishWebSocketEvent_Call) RunAndReturn(run func(event string, payload map[string]interface{}, broadcast *model.WebsocketBroadcast)) *MockClient_PublishWebSocketEvent_Call {
	_c.Run(run)
	return _c
}

// UpdatePost provides a mock function for the type MockClient
func (_mock *MockClient) UpdatePost(post *model.Post) error {
	ret := _mock.Called(post)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.Post) error); ok {
		r0 = returnFunc(post)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_UpdatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePost'
type MockClient_UpdatePost_Call struct {
	*mock.Call
}

// UpdatePost is a helper method to define mock.On call
//   - post
func (_e *MockClient_Expecter) UpdatePost(post interface{}) *MockClient_UpdatePost_Call {
	return &MockClient_UpdatePost_Call{Call: _e.mock.On("UpdatePost", post)}
}

func (_c *MockClient_UpdatePost_Call) Run(run func(post *model.Post)) *MockClient_UpdatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Post))
	})
	return _c
}

func (_c *MockClient_UpdatePost_Call) Return(err error) *MockClient_UpdatePost_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_UpdatePost_Call) RunAndReturn(run func(post *model.Post) error) *MockClient_UpdatePost_Call {
	_c.Call.Return(run)
	return _c
}
